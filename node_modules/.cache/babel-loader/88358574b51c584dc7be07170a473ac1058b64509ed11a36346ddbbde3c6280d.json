{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { getCard } from \"../utils/Api\";\nconst initialState = {\n  cardsArray: [],\n  isLoading: false,\n  error: ''\n};\nexport const takeCards = createAsyncThunk('cardsGet', async () => {\n  return await getCard().then(data => data.data);\n});\nconst cardsSlice = createSlice({\n  name: 'cards',\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(takeCards.pending.type, (state, action) => {\n      state.isLoading = true;\n      state.error = '';\n    }).addCase(takeCards.fulfilled.type, (state, action) => {\n      state.cardsArray = action.payload;\n      state.isLoading = false;\n    }).addCase(takeCards.rejected.type, (state, action) => {\n      state.error = action.payload;\n      state.isLoading = false;\n    });\n  }\n});\nexport default cardsSlice.reducer;\n// export const {cardsLoaded, cardsUploading, cardsLoadError} = cardsSlice.actions;","map":{"version":3,"names":["createAsyncThunk","createSlice","getCard","initialState","cardsArray","isLoading","error","takeCards","then","data","cardsSlice","name","extraReducers","builder","addCase","pending","type","state","action","fulfilled","payload","rejected","reducer"],"sources":["/Users/alina/practicum/stellar-burgers/src/services/cardsSlice.js"],"sourcesContent":["import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\nimport {getCard} from \"../utils/Api\";\n\nconst initialState = {\n    cardsArray: [],\n    isLoading: false,\n    error: ''\n};\n\nexport const takeCards = createAsyncThunk(\n    'cardsGet',\n    async () => {\n        return await getCard().then((data) => data.data);\n    }\n)\n\nconst cardsSlice = createSlice({\n    name: 'cards',\n    initialState,\n    extraReducers: builder => {\n        builder\n            .addCase(takeCards.pending.type, (state, action) => {\n                state.isLoading = true;\n                state.error = '';\n            })\n            .addCase(takeCards.fulfilled.type, (state, action) => {\n                state.cardsArray = action.payload;\n                state.isLoading = false;\n            })\n            .addCase(takeCards.rejected.type, (state, action) => {\n                state.error = action.payload;\n                state.isLoading = false;\n            })\n    }\n})\n\nexport default cardsSlice.reducer;\n// export const {cardsLoaded, cardsUploading, cardsLoadError} = cardsSlice.actions;"],"mappings":"AAAA,SAAQA,gBAAgB,EAAEC,WAAW,QAAO,kBAAkB;AAC9D,SAAQC,OAAO,QAAO,cAAc;AAEpC,MAAMC,YAAY,GAAG;EACjBC,UAAU,EAAE,EAAE;EACdC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE;AACX,CAAC;AAED,OAAO,MAAMC,SAAS,GAAGP,gBAAgB,CACrC,UAAU,EACV,YAAY;EACR,OAAO,MAAME,OAAO,EAAE,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACA,IAAI,CAAC;AACpD,CAAC,CACJ;AAED,MAAMC,UAAU,GAAGT,WAAW,CAAC;EAC3BU,IAAI,EAAE,OAAO;EACbR,YAAY;EACZS,aAAa,EAAEC,OAAO,IAAI;IACtBA,OAAO,CACFC,OAAO,CAACP,SAAS,CAACQ,OAAO,CAACC,IAAI,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACZ,SAAS,GAAG,IAAI;MACtBY,KAAK,CAACX,KAAK,GAAG,EAAE;IACpB,CAAC,CAAC,CACDQ,OAAO,CAACP,SAAS,CAACY,SAAS,CAACH,IAAI,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAClDD,KAAK,CAACb,UAAU,GAAGc,MAAM,CAACE,OAAO;MACjCH,KAAK,CAACZ,SAAS,GAAG,KAAK;IAC3B,CAAC,CAAC,CACDS,OAAO,CAACP,SAAS,CAACc,QAAQ,CAACL,IAAI,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACX,KAAK,GAAGY,MAAM,CAACE,OAAO;MAC5BH,KAAK,CAACZ,SAAS,GAAG,KAAK;IAC3B,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,eAAeK,UAAU,CAACY,OAAO;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}