{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { v4 as uuidv4 } from 'uuid';\nconst initialState = {\n  constructorIngredient: []\n};\nconst constructorSlice = createSlice({\n  name: 'ingredient',\n  initialState,\n  reducers: {\n    addIngredient: {\n      reducer: (state, action) => {\n        if (action.payload.type === 'bun' && state.constructorIngredient.map(ingredient => ingredient.type === \"bun\")) {\n          state.constructorIngredient = state.constructorIngredient.filter(ingredient => ingredient.type !== 'bun');\n        }\n        state.id = action.payload.ingredientId;\n        state.constructorIngredient.push(action.payload);\n      },\n      prepare: payload => {\n        return {\n          payload: {\n            ingredientId: uuidv4()\n          }\n        };\n      }\n    },\n    removeIngredient: (state, action) => {\n      state.constructorIngredient = state.constructorIngredient.filter(ingredient => ingredient._id !== action.payload);\n    }\n  }\n});\nexport default constructorSlice.reducer;\nexport const {\n  addIngredient,\n  removeIngredient\n} = constructorSlice.actions;","map":{"version":3,"names":["createSlice","v4","uuidv4","initialState","constructorIngredient","constructorSlice","name","reducers","addIngredient","reducer","state","action","payload","type","map","ingredient","filter","id","ingredientId","push","prepare","removeIngredient","_id","actions"],"sources":["/Users/alina/practicum/stellar-burgers/src/services/constructorSlice.js"],"sourcesContent":["import {createSlice} from \"@reduxjs/toolkit\";\nimport { v4 as uuidv4} from 'uuid';\n\nconst initialState = {\n    constructorIngredient: []\n};\n\nconst constructorSlice = createSlice({\n    name: 'ingredient',\n    initialState,\n    reducers: {\n        addIngredient: {\n            reducer: (state,action) => {\n            if (action.payload.type === 'bun' && state.constructorIngredient.map((ingredient) => ingredient.type === \"bun\")) {\n                state.constructorIngredient = state.constructorIngredient.filter((ingredient) => ingredient.type !== 'bun')\n            }\n            state.id = action.payload.ingredientId;\n            state.constructorIngredient.push(action.payload);\n        },\n            prepare: (payload) => {\n                return {\n                    payload: {\n                        ingredientId: uuidv4(),\n                    },\n                };\n            },\n        },\n        removeIngredient: (state,action) => {\n            state.constructorIngredient = state.constructorIngredient.filter((ingredient) => ingredient._id !== action.payload);\n        },\n    }\n})\n\nexport default constructorSlice.reducer;\nexport const {addIngredient, removeIngredient} = constructorSlice.actions;"],"mappings":"AAAA,SAAQA,WAAW,QAAO,kBAAkB;AAC5C,SAASC,EAAE,IAAIC,MAAM,QAAO,MAAM;AAElC,MAAMC,YAAY,GAAG;EACjBC,qBAAqB,EAAE;AAC3B,CAAC;AAED,MAAMC,gBAAgB,GAAGL,WAAW,CAAC;EACjCM,IAAI,EAAE,YAAY;EAClBH,YAAY;EACZI,QAAQ,EAAE;IACNC,aAAa,EAAE;MACXC,OAAO,EAAEA,CAACC,KAAK,EAACC,MAAM,KAAK;QAC3B,IAAIA,MAAM,CAACC,OAAO,CAACC,IAAI,KAAK,KAAK,IAAIH,KAAK,CAACN,qBAAqB,CAACU,GAAG,CAAEC,UAAU,IAAKA,UAAU,CAACF,IAAI,KAAK,KAAK,CAAC,EAAE;UAC7GH,KAAK,CAACN,qBAAqB,GAAGM,KAAK,CAACN,qBAAqB,CAACY,MAAM,CAAED,UAAU,IAAKA,UAAU,CAACF,IAAI,KAAK,KAAK,CAAC;QAC/G;QACAH,KAAK,CAACO,EAAE,GAAGN,MAAM,CAACC,OAAO,CAACM,YAAY;QACtCR,KAAK,CAACN,qBAAqB,CAACe,IAAI,CAACR,MAAM,CAACC,OAAO,CAAC;MACpD,CAAC;MACGQ,OAAO,EAAGR,OAAO,IAAK;QAClB,OAAO;UACHA,OAAO,EAAE;YACLM,YAAY,EAAEhB,MAAM;UACxB;QACJ,CAAC;MACL;IACJ,CAAC;IACDmB,gBAAgB,EAAEA,CAACX,KAAK,EAACC,MAAM,KAAK;MAChCD,KAAK,CAACN,qBAAqB,GAAGM,KAAK,CAACN,qBAAqB,CAACY,MAAM,CAAED,UAAU,IAAKA,UAAU,CAACO,GAAG,KAAKX,MAAM,CAACC,OAAO,CAAC;IACvH;EACJ;AACJ,CAAC,CAAC;AAEF,eAAeP,gBAAgB,CAACI,OAAO;AACvC,OAAO,MAAM;EAACD,aAAa;EAAEa;AAAgB,CAAC,GAAGhB,gBAAgB,CAACkB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}